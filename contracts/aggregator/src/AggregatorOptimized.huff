
#define constant OWNER = FREE_STORAGE_POINTER()

#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller                   // [msg.sender]
    [OWNER] sload            // [owner, msg.sender]
    eq                       // [owner == msg.sender]
    is_owner jumpi           // []

    0x00 0x00 revert
    is_owner:
}

#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Copy the owner into memory
    0x20                                // [size] - byte size to copy
    0x40 codesize sub                   // [offset, size] - offset in the code to copy from
    0x00                                // [mem, offset, size] - offset in memory to copy to
    codecopy
    
    // Set the new owner
    0x00 mload                          // [owner]
    dup1                                // [owner, owner]
    [OWNER]                             // [OWNER, owner, owner]
    sstore                              // [owner]

}

#define macro MAIN() = takes (0) returns (0) {
    // Get the function signature from the calldata
    0x00 calldataload        // [calldata @ 0x00]
    0xE0 shr                 // [func_sig (calldata @ 0x00 >> 0xE0)]

    // Check if the function signature in the calldata is
    // a match to our `addWord` function definition.
    // More about the `__FUNC_SIG` builtin in the `Builtin Functions`
    // section.
    __FUNC_SIG(addWord)      // [func_sig(addWord), func_sig]
    eq                       // [func_sig(addWord) == func_sig]
    add_word jumpi           // []

    // Revert if no function signature matched
    0x00 0x00 revert

    // Create a jump label
    add_word:
    // Call the `ADD_WORD` macro with the first calldata
    // input, store the result in memory, and return it.
    0x04 calldataload    // [input_num]
    ADD_WORD()           // [result]
    0x00 mstore          // []
    0x20 0x00 return
}

#define function uniswapV3ExactOutPayToSender_A729BB(bytes) public